To use this module, you need a working RNNLIB. It can be obtained here:

http://sourceforge.net/apps/mediawiki/rnnl/index.php?title=Main_Page

The software is released under the GPLv3 license, and thus not included here.

Please build the software and put the resulting binary somewhere in your $PATH
or set the binary location in the RNNLIB variable in rnnlib.py.

For building, you need the netcdf library and the development headers.

Mac OS X:
---------
with macports, install netcdf-cxx and then configure RNNLIB with:

CPPFLAGS="-I/opt/local/include" LDFLAGS="-L/opt/local/lib" ./configure

Linux:
------
usually no CPPFLAGS and LDFLAGS are needed. On Ubuntu, install libnetcdf-dev.

all systems:
------------
To speed up things, you can include:

CXXFLAGS="-g -O3 --fast-math" (before ./configure)

Then continue with the usual make etc. stuff. It is advisable to patch the
source of RNNLIB before compiling, to speed things further up (less i/o):

# diff DataExporter.cpp.orig DataExporter.cpp  
43,47c43,50
< 		{			
< 			string filename = path + exp.first + "_" + val.first;
< 			ofstream out (filename.c_str());
< 			check(out.is_open(), "couldn't open display file " + filename + " for writing");
< 			out << *(val.second);
---
> 		{
> 			if (exp.first == "output")
> 			{
> 				string filename = path + exp.first + "_" + val.first;
> 				ofstream out (filename.c_str());
> 				check(out.is_open(), "couldn't open display file " + filename + " for writing");
> 				out << *(val.second);
> 			}
